[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Welcome\nThis landing page will contain an image and a short text about the reasoning behind the book and what it is trying to achieve.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "0_chapter-key.html",
    "href": "0_chapter-key.html",
    "title": "Chapter key",
    "section": "",
    "text": "A heading\nThe main text will go here. This can cover both practical and theoretical aspects of data visualization.",
    "crumbs": [
      "Chapter key"
    ]
  },
  {
    "objectID": "0_chapter-key.html#a-heading",
    "href": "0_chapter-key.html#a-heading",
    "title": "Chapter key",
    "section": "",
    "text": "A sub-heading\nThese will be used to divide content further.",
    "crumbs": [
      "Chapter key"
    ]
  },
  {
    "objectID": "0_chapter-key.html#exercises",
    "href": "0_chapter-key.html#exercises",
    "title": "Chapter key",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\n\nExercise 1\n\n\n\n\n\n\nExercises aim to engage you actively with the material, both to make it more fun to learn and to improve your learning. Try to solve the exercise on your own first, before looking at the hint and the solution; this active engagement is what aids your learning. Click the hint below to expand it.\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nBefore looking at the solution, try to use the hint to figure out the answer.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThe solution is inside the “Hint” section, to encourage you to first try to use the hint to solve the exercise.",
    "crumbs": [
      "Chapter key"
    ]
  },
  {
    "objectID": "0_chapter-key.html#coding-content",
    "href": "0_chapter-key.html#coding-content",
    "title": "Chapter key",
    "section": "Coding content",
    "text": "Coding content\nCoding content will often include a panel with multiple tabs, so that you can easily see what the same code looks like for different visualization packages. These sections also include explanations that are specific to the code of a certain package, rather than being about data visualization in general.\n\nPackage OnePackage Two\n\n\n\n# Code for the first package, e.g.:\nrange(5)\n\nrange(0, 5)\n\n\n\n\n\n# Code for the second package, e.g.:\nseq(5)\n\n[1] 1 2 3 4 5\n\n\n\n\n\n\n\nOptional content\nContent in the margin is optional and can include fun factual tidbits, historical explanations, etymology, and more.",
    "crumbs": [
      "Chapter key"
    ]
  },
  {
    "objectID": "0_chapter-key.html#deep-dive",
    "href": "0_chapter-key.html#deep-dive",
    "title": "Chapter key",
    "section": "Deep dive",
    "text": "Deep dive\n\n\nClick to expand the optional deep dive or proceed to the exercise mission.\n\nEvery chapter contains a deep dive with optional content. This section elaborates on a concept that was learned in the chapter, and often contains more challenging content.",
    "crumbs": [
      "Chapter key"
    ]
  },
  {
    "objectID": "0_chapter-key.html#exercise-mission",
    "href": "0_chapter-key.html#exercise-mission",
    "title": "Chapter key",
    "section": "Exercise mission",
    "text": "Exercise mission\nIn addition to the exercises spread throughout the content, each chapter contains a set of connected exercises in the end that interweaves the content learned throughout the chapter. This challenges you to deepen your understanding as it requires comprehension of how the content fit together rather than solely mastering each section in isolation.\nTo help you along the way on these exercises, you will be able to converse with an avatar from the fictional setting of the book. These will make it clear what your goal is for each section and help you along the way if you get stuck.\nBefore you get started with this section, make sure you review the chapter summary in the learning outcomes and that you understand each of the items there.",
    "crumbs": [
      "Chapter key"
    ]
  },
  {
    "objectID": "1_intro.html",
    "href": "1_intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Arrival in Viridia\nThe rusty doors of your spaceship creak open. Through blurry eyes, you see metal spires curving up into a green sky. You’ve landed in the colony of Viridia.\nStrange faces gather around you, their eyes wide with disbelief. The whispers spread: “How could an Earthling get here?” But Earth is gone—its demise a stark warning to civilizations across the galaxy.\nAnd you? You are its last messenger.\nWhat happened in the final days of Earth? Why did it spiral out of control?\nIn the coming chapters of your life, you will help the Viridians answer these questions, to visualize the history of your home planet. And maybe, together you can prevent them from meeting the same fate.\nA Journey Through Data\nThis book uses visualization to explore the forces that shape society—health, economy, environment, and culture. Through visualization, we will map these forces, reveal their connections, and discover insights to build a better future.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "1_intro.html#arrival-in-viridia",
    "href": "1_intro.html#arrival-in-viridia",
    "title": "1  Introduction",
    "section": "",
    "text": "Learning outcomes\n\n\n\n\nExplain that the main advantage of visualizing data instead of presenting it with numbers is that they are easier to interpret for humans.\nUnderstand that the advantage of using a high level level visualization syntax is that it allows us to think in terms of the data, rather than focusing on graphical details.\nUnderstand that a grammar of graphics defines grammatical rules that can be used to construct entire visualizations from smaller building blocks, such as geometric marks and aesthetic encodings.\nApply the visualization grammars in Altair and ggplot to create a basic chart via alt.Chart().mark_point().encode(x='...', y='...', color='...') and  ggplot() + aes(x=..., y=..., color=...) + geom_point()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "1_intro.html#what-is-data-visualization",
    "href": "1_intro.html#what-is-data-visualization",
    "title": "1  Introduction",
    "section": "1.2 What is data visualization?",
    "text": "1.2 What is data visualization?\nAt its core, data visualization is about representing numbers with graphical elements such as the position of a point, the length of a bar, or the color of a line.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "1_intro.html#what-is-the-purpose-of-visualizing-data",
    "href": "1_intro.html#what-is-the-purpose-of-visualizing-data",
    "title": "1  Introduction",
    "section": "1.3 What is the purpose of visualizing data?",
    "text": "1.3 What is the purpose of visualizing data?\nWe can use visualizations both to improve own understanding of data and to effectively communicate our data insights to others. While we often use visualization to help us answer a specific question we have about our dataset, it can also help us generate new questions.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "1_intro.html#why-bother-visualizing-data-instead-of-showing-raw-numbers",
    "href": "1_intro.html#why-bother-visualizing-data-instead-of-showing-raw-numbers",
    "title": "1  Introduction",
    "section": "1.4 Why bother visualizing data instead of showing raw numbers?",
    "text": "1.4 Why bother visualizing data instead of showing raw numbers?\nTo understand why visualizations are so powerful, it is helpful to remember that to answer a question, we often have to put the data in a format that is easy for us humans to interpret. Because our number systems have only been around for about 5,000 years, we need to assert effort and train ourselves to recognize structure in numerical data.\nVisual systems, on the other hand, have undergone refinement during 500,000,000 years of evolution, so we can instinctively recognize visual patterns and accurately estimate visual properties such as colors and distances.\nPractically, this means that we can arrive at correct conclusions faster from studying visual rather than numerical representations of the same data. For example, have a look at the four sets of numbers in the table on the slide. Can you see the differences in the general trends between these four sets of numbers? This is a slightly modified version of the original, which was put together by statistician Francis Anscombe in the 70s.\n\n\n\n\n\n\n\nA\n\n\nX\nY\n\n\n\n\n10.00\n8.04\n\n\n8.00\n6.95\n\n\n13.00\n7.58\n\n\n9.00\n8.81\n\n\n11.00\n8.33\n\n\n14.00\n9.96\n\n\n6.00\n7.24\n\n\n4.00\n4.26\n\n\n12.00\n10.84\n\n\n7.00\n4.81\n\n\n5.00\n5.68\n\n\n\n\n\n\n\n\n\nB\n\n\nX\nY\n\n\n\n\n10.00\n9.14\n\n\n8.00\n8.14\n\n\n13.00\n8.74\n\n\n9.00\n8.77\n\n\n11.00\n9.26\n\n\n14.00\n8.10\n\n\n6.00\n6.13\n\n\n4.00\n3.10\n\n\n12.00\n9.13\n\n\n7.00\n7.26\n\n\n5.00\n4.74\n\n\n\n\n\n\n\n\n\nC\n\n\nX\nY\n\n\n\n\n10.00\n7.46\n\n\n8.00\n6.77\n\n\n13.00\n8.50\n\n\n9.00\n7.11\n\n\n11.00\n7.81\n\n\n14.00\n8.84\n\n\n6.00\n6.08\n\n\n4.00\n5.39\n\n\n12.00\n8.15\n\n\n7.00\n6.42\n\n\n5.00\n5.73\n\n\n\n\n\n\n\n\n\nD\n\n\nX\nY\n\n\n\n\n8.00\n6.58\n\n\n8.00\n5.76\n\n\n8.00\n7.71\n\n\n8.00\n8.84\n\n\n8.00\n8.47\n\n\n8.00\n7.04\n\n\n8.00\n5.25\n\n\n19.00\n12.50\n\n\n8.00\n5.56\n\n\n8.00\n7.91\n\n\n8.00\n6.89\n\n\n\n\n\n\n\n\nSummary statistics don’t tell the whole story\nYou are likely not able to see much difference between the data sets in the table above. What about if I showed you a few commonly used numerical summaries of the data?\n\n\n\n\n\n\n\nA\n\n\nX\nY\n\n\n\n\n9.00\n7.50\n\n\n3.32\n2.03\n\n\n\n\n\n\n\n\n\nB\n\n\nX\nY\n\n\n\n\n9.00\n7.50\n\n\n3.32\n2.03\n\n\n\n\n\n\n\n\n\nC\n\n\nX\nY\n\n\n\n\n9.00\n7.11\n\n\n3.32\n1.15\n\n\n\n\n\n\n\n\n\nD\n\n\nX\nY\n\n\n\n\n9.00\n7.50\n\n\n3.32\n2.03\n\n\n\n\n\n\n\n Summaries, such as the mean and standard deviation, are helpful statistical tools that are often useful for detecting the differences between datasets. However, since they collapse the data into just a few numbers, statistical summaries can’t tell the whole story about the data and there can be important differences between datasets that summaries fail to reveal.\nAbove, the mean and standard deviation indicate that set C is slightly different from the other sets of data in terms of the centre of the sample distribution and the spread of that distribution, while the remaining three sets of data have a similar centre and spread.\n\n\nPlotting the data immediately reveals patterns in the data\nSo if you can’t really see any patterns in the data and the statistical summaries are the same, that must mean that the four sets are pretty similar, right? Sounds about right to me so let’s go ahead and plot them to have a quick look and…\n\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n… what… how can they be so different… there must be something wrong, right? Well what is wrong is that humans are not good at detecting patterns in raw numbers, and we don’t have good intuition about which combination of numbers can contribute to the same statistical summaries. But guess what we excel at? Detecting visual patterns!\nIt is immediately clear to us how these sets of numbers differ once they are shown as graphical objects instead of textual objects. We could not detect these patterns from only looking at the raw numbers or summary statistics This is one of the main reasons why data visualization is such a powerful tool for data exploration and communication.\nIn our example above, we would come to widely different conclusions about the behavior of the data for the four different data sets. Sets A and C are roughly linearly increasing at similar rates, whereas set B reaches a plateau and starts to drop, and set D has a constant X-value for all numbers except one big outlier.\n\n\nA modern take on Anscombe’s quartet\nFor a more recent and dynamic illustration of how graphical representations are much easier for us to interpret, check out the Datasaurus Dozen animation below. It displays several different datasets, all with the same mean, standard deviation and correlation between X and Y, but looking at the data graphically shows us how different these datasets actually are.\n\n\n\nThe Datasaurus Dozen: Datasets with identical summary statistics but very different distributions.\n\n\nNow that we have experienced the benefits of visualizing data, let’s figure out how to create such visualizations!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "1_intro.html#which-visualization-library-should-we-pick",
    "href": "1_intro.html#which-visualization-library-should-we-pick",
    "title": "1  Introduction",
    "section": "1.5 Which visualization library should we pick?",
    "text": "1.5 Which visualization library should we pick?\nThere is a lot we can learn about visualization without using coding, but in order to make this learning experience interactive, we will create charts programmatically as we learn about new visualization concepts.\nIn order to do so, we will start by selecting which visualization library to use. To make an informed decision, it is helpful to understand that most visualization libraries can be classified as taking either a high level declarative approach or a low level imperative approach to creating visualization.\n\n\n\n\n\n\nExercise 1\n\n\n\n\n\n\nTo understand the difference between these two approaches, let’s start with an example, using the following small toy data set:\n\n\n\n\n\n\n\n\n\nx\ny\ngroup\n\n\n\n\n0\n0.2\n0.6\na\n\n\n1\n0.6\n0.9\na\n\n\n2\n1.2\n1.8\nb\n\n\n3\n2.4\n2.7\nb\n\n\n\n\n\n\n\nA helpful way to illustrate the difference between the two syntax approaches is to imagine that we want to create a chart where we color the points according to their group. Here is pseudocode1 that illustrates this difference:\n\nDeclarative syntaxImperative syntax\n\n\ncreate_chart(\n    x='x',\n    y='y',\n    color='group'\n)\n\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\nfig = create_figure()\ncolors = ['blue', 'yellow']\nfor color, group in zip(colors, df['group'].unique()):\n    tmp_df = df[df['group'] == group]\n    fig.add_chart(tmp_df['x'], tmp_df['y'], label=group, color=color)\n\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\nAlthough the same chart is created from both these pseudocode examples, the syntax looks widely different. Before clicking on the hint and solution below to read our explanation of the two approaches, pause here and try to describe the differences between the two in your own words2.  \n\n\n\n\n\n\nHint\n\n\n\n\n\n\nDoes one of the approaches focus more on the data and the other more on the plot-specific details?\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nBased on the syntax of the exercise above, we can say that a declarative approach to visualization let’s us express ourselves in terms of the data (color='group') whereas an imperative approach to visualization focuses more explicitly on plot construction details such as defining colors explicitly and then assigning them to groups by looping through the data.\n\n\n\n\n\n\n\n\n\n\n\n\nA related way to understand declarative vs imperative approaches is to consider the difference between giving an instruction in each:\n\nDeclarative instructionImperative instruction\n\n\n“Color by the column group in the dataframe.”\nFocus: Declaring links between data variables (e.g., group) and graphical properties (e.g. color). The rest of the plot details (such as which colors to use) are handled automatically.\n\n\n“Loop over the dataframe and plot any observations of group A in blue and any observations of group B in yellow.”\nFocus: Being explicit with all the details for creating the chart via for-loops and low-level drawing commands.\n\n\n\nIn this book we will learn about declarative visualization tools, since these allow us to code a high-level specification of what we want the visualization to include, rather than coding out the details of how to implement the visualization. Another way to state this would be that high level libraries focus on data and relationships, whereas low level libraries focus on plot construction details. \nAmong declarative visualization libraries, there are still a few different approaches to how visualization is created. Here, we are going to learn about libraries that implement a so called “grammar of graphics”.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "1_intro.html#what-is-a-grammar-of-graphics",
    "href": "1_intro.html#what-is-a-grammar-of-graphics",
    "title": "1  Introduction",
    "section": "1.6 What is a grammar of graphics?",
    "text": "1.6 What is a grammar of graphics?\nA graphical grammar is a system for creating visualizations by combining basic elements according to specific rules. It parallels the grammars of natural and programming languages, but applies to visual components.\nWe are all familiar with the grammatical rules for natural languages3, where they tell us how to combine words into sentences to convey particular meanings. Programming languages also have a grammatical structure, let’s see how they work in the following exercise:\n\n\n\n\n\n\nExercise 2\n\n\n\n\n\n\nWhat do you think the output would be of the following Python code?\n1 + 2\nAs you might have expected, the output is 3 because Python uses the conventional rules of mathematics to add the two numbers together. Almost all programming languages follow this rule. But what does the +-operator do if we are trying to add something other than numbers. What do you think the output would be of the following code? Do you think it differs between programming languages?\n'one' + 'two'\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nJust like that addition of numbers contain all counts of the individual numbers, maybe the addition of two strings would contain all the characters from both the strings?\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThe grammar of Python defines that the +-operator should perform concatenation when strings are added together, so the returned result would be \"onetwo\". In contrast, the grammar of R says that there is no such thing as addition of strings, so it would throw an error complaining that non-numeric arguments were passed to the +-operator.\n\n\n\n\n\n\n\n\n\n\n\n\nAs with the grammar of programming languages, visualization packages make different choices for what happens when different visual elements are added together. Key components of a graphical grammar often include:\n\nCanvas: The background or base of the chart.\nGeometric marks: Visual elements representing data (e.g. points, bars).\nVisual encoding: Rules for mapping data to visual properties (e.g. the column 'group' to color).\n\nIn the next session, we will see how these components can be added together using code.\nThe following table illustrates the similarities between the grammars of programming, natural language and graphics:\n\n\n\n\n\n\n\n\n\nComponent\nNatural Language\nProgramming Language\nGraphical Grammar\n\n\n\n\nBasic Units\nWords\nVariables, literals\nMarks (points, lines, bars)\n\n\nSyntax Rules\nWord order, punctuation\nSyntax rules, operators\nRules for combining marks, layers, aesthetics\n\n\nSemantics\nWord meanings, context\nExpression meanings\nMeanings of visual encodings\n\n\nComposition\nSentences, paragraphs\nStatements, code blocks\nLayers, facets\n\n\nOutput\nText\nExecutable code\nData visualizations\n\n\nModifiers\nAdjectives, adverbs\nAttributes, parameters\nScales, legends, annotations\n\n\n\nUnderstanding these parallels enables users to approach data visualization systematically, leveraging a defined set of components and rules.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "1_intro.html#sec-learning-to-speak",
    "href": "1_intro.html#sec-learning-to-speak",
    "title": "1  Introduction",
    "section": "1.7 Learning to speak with a grammar of graphics",
    "text": "1.7 Learning to speak with a grammar of graphics\nTo start creating our own charts, we will work with two libraries that implement a grammar of graphics: Altair in Python, and ggplot in R. These two libraries both offer a powerful and concise visualization grammar for quickly building a wide range of statistical charts.\nWhat do these grammars look like? In brief, we first create a canvas/chart, then encode our data variables as different channels in this chart (x, y, color, etc) and add geometric marks to represent the data (points, lines, etc). You can see an illustration of this in the image below, together with how ggplot (top) and Altair (bottom) implements the grammatical components in their respective syntax. The exact syntax is slightly different, but the overall structure very much the same.\n  \nAs a result of the predictable structure, a grammar of graphics allows you to create an impressive range of visualizations from simple to sophisticated. A graphical grammar also makes it notably easier to change between different types of plots, as the code syntax follows a predictable structure and only parts of the grammar changes between charts. In fact, Altair and ggplot have been show to be two of the libraries that require the least amount of changes in the code between different types of visualizations. \nLet’s get coding!\nData in Altair and ggplot is built around “tidy” dataframes, which consists of a set of named data columns (also referred to as variables or fields) with one feature each and rows with one observation each. Here, we will load in a small dataset relating to cars containing historical trends in automotive design, performance, and efficiency.\n\nStellar charts\nAltair is the name of a star in the same constellation as the star Vega, which is also the name of the Javascript library that Altair is built upon.\n\n\nGrammatically correct\nThe “gg” in ggplot is a reference to the book “Grammar of Graphics”, which inspired the creation of the ggplot library.\n\n\nAltairggplot\n\n\n\nimport altair as alt\nimport pandas as pd\n\n\nurl = 'https://raw.githubusercontent.com/joelostblom/teaching-datasets/main/cars.csv'\ncars = pd.read_csv(url)\ncars\n\n\n\n\n\n\n\n\n\n\nName\nMiles_per_Gallon\nCylinders\nDisplacement\nHorsepower\nWeight_in_lbs\nAcceleration\nYear\nOrigin\n\n\n\n\n0\nchevrolet chevelle malibu\n18.0\nEight\n307.0\n130.0\n3504\n12.0\n1970-01-01\nUSA\n\n\n1\nbuick skylark 320\n15.0\nEight\n350.0\n165.0\n3693\n11.5\n1970-01-01\nUSA\n\n\n2\nplymouth satellite\n18.0\nEight\n318.0\n150.0\n3436\n11.0\n1970-01-01\nUSA\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n396\ndodge rampage\n32.0\nFour\n135.0\n84.0\n2295\n11.6\n1982-01-01\nUSA\n\n\n397\nford ranger\n28.0\nFour\n120.0\n79.0\n2625\n18.6\n1982-01-01\nUSA\n\n\n398\nchevy s-10\n31.0\nFour\n119.0\n82.0\n2720\n19.4\n1982-01-01\nUSA\n\n\n\n\n399 rows × 9 columns\n\n\n\n\n\n\n\nlibrary(tidyverse)\n\n\nurl &lt;- 'https://raw.githubusercontent.com/joelostblom/teaching-datasets/main/cars.csv'\ncars &lt;- read_csv(url)\ncars\n\n\n\n\n\n\n\n\n\n\nName\nMiles_per_Gallon\nCylinders\nDisplacement\nHorsepower\nWeight_in_lbs\nAcceleration\nYear\nOrigin\n\n\n\n\n1\nchevrolet chevelle malibu\n18.0\nEight\n307.0\n130.0\n3504.0\n12.0\n0.0\nUSA\n\n\n2\nbuick skylark 320\n15.0\nEight\n350.0\n165.0\n3693.0\n11.5\n0.0\nUSA\n\n\n3\nplymouth satellite\n18.0\nEight\n318.0\n150.0\n3436.0\n11.0\n0.0\nUSA\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n397\ndodge rampage\n32.0\nFour\n135.0\n84.0\n2295.0\n11.6\n4383.0\nUSA\n\n\n398\nford ranger\n28.0\nFour\n120.0\n79.0\n2625.0\n18.6\n4383.0\nUSA\n\n\n399\nchevy s-10\n31.0\nFour\n119.0\n82.0\n2720.0\n19.4\n4383.0\nUSA\n\n\n\n\n399 rows × 9 columns\n\n\n\n\n\n\n\nNow let’s create our first charts!\n\nAltairggplot\n\n\nThe fundamental object in Altair is the Chart, which takes a data frame as a single argument alt.Chart(cars). With a chart object in hand, we can now specify how we would like the data to be visualized. We first indicate what kind of geometric mark we want to use to represent the data. We can set the mark attribute of the chart object using any the Chart.mark_* methods. For example, we can show the data as points using mark_point():\n\nalt.Chart(cars).mark_point()\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\nAlthough it looks like there is only one point in the chart, there is actually one point per row in the dataset, all plotted on top of each other. To visually separate the points, we can map various encoding channels, (or just encodings or channels for short), to columns in the dataset. For example, we could encode the column Miles_per_Gallon (how many miles a car can travel on each gallon of fuel) of the data using the x channel, which represents the x-axis position of the points. To specify this, we use the encode method:\n\nalt.Chart(cars).mark_point().encode(x='Miles_per_Gallon')\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\nFor all Altair charts, you can see that there is a button with three dots to the top right. If you click this you will have options to save the chart and to open the underlying Vega-Lite code. We will see how to save charts programmatically in a later chapter.\n\n\nIn ggplot2, we begin by creating a canvas linked with our dataset with ggplot(cars) and encode the aesthetics of the chart with the aes() function, which maps a column in the data frame to a dimension in the chart.\n\nggplot(cars) + aes(x = Miles_per_Gallon)\n\n\n\n\n\n\n\n\nTo visualize the data, we need to tell ggplot which geometric mark to use for representing the data. Let’s use points via the geom_point() function. You don’t see any output here because geom_point() requires both an x and y aesthetic; we will see how to add these in the next code block (in fact this expression would raise an error if evaluated, so here we just show the code).\nggplot(cars) + aes(x = Miles_per_Gallon) + geom_point()\nNote that instead of ggplot() + aes() you will often see ggplot(aes()). These are functionally the same, but putting aes() outside ggplot() gives some additional flexibility as we will see later.\n\n\n\n\n\nTo quote or not to quote\nAs you can see, in Altair you need to use quotes to refer to the column names while in ggplot you don’t. Why is that? This is because Python is a stricter language than R, and requires that packages follow its fundamental rules and we can’t reference a column as an unquoted variable name. In R, a package is more free to redefine the rules and essentially create a domain specific syntax for its purpose. This has both pros and cons: it is convenient to not have to type the quotes and to get tab completion for column names, but it is inconvenient to write functions and program with these constructs as detailed in the dplyr documentation.\nThough we’ve now separated the data by one attribute, we still have multiple points overlapping within each category. Let’s further separate these by spreading the data out over the y-axis. With the addition of a second dimension in our chart, we’re ready to ask our first question about the data. Let’s say we’re interested in how a car’s fuel efficiency is related to its engine power. To answer this question, we would want to explore the relationship between the columns Miles_per_Gallon and Horsepower (how powerful the engine is), which we can do by assigning them to the x and y dimension, respectively.\n\nAltairggplot\n\n\n\nalt.Chart(cars).mark_point().encode(\n    x='Miles_per_Gallon',\n    y='Horsepower'\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\nggplot(cars) +\n    aes(\n        x = Miles_per_Gallon,\n        y = Horsepower\n    ) +\n    geom_point()\n\nWarning: Removed 14 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStyling differences\nThe default style is quite different between the libraries. Both have advantages, and they are easy to customize to look however you want, which we will also get into later. It’s worth noting that ggplot does not including the origin of the plot (x=0, y=0) by default, but Altair does in many cases. Both these defaults are sensible in different context, which we will learn more about in later chapters.   You can also see that ggplot will print a warning when there are some observations that can be plotted due to missing values in one of the two columns. Altair also avoids plotting these observations, but is less verbose and does not print a warning.   Finally, note that = for parameter assignment is surrounded by spaces in R but not in Python.\nThis type of chart is often called a “scatter plot”. Characteristic for a scatter plot is that there is one graphical element (often a point) per observations in the data and one column each on the x and y axis. We will learn more about for which purposes it is effective later in the book.\n\n\n\n\n\n\nExercise 3\n\n\n\n\n\n\nStudy the chart above, what can you say about the relationship between Horsepower and Miles_per_Gallon? If you choose to use statistical terms such as talking about the correlation between the two variables, try to express yourself in common English as if you were explaining what the chart means to someone of the general public. Finally, it’s always good to ask yourself if your interpretation of the chart makes sense, given your knowledge about how the world works.\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nIt can be helpful to start with a particular area of the chart. For example, look at the cars with the most powerful engines (highest horsepower), what is their fuel efficiency? Now do the same for the cars with the least powerful engines and compare the two.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nFrom the chart, we can see that Horsepower and Miles_per_Gallon are “negatively correlated”. In plain English, this means that cars with more powerful engines (higher Horsepower), have lower fuel efficiency (lower Miles_per_Gallon). This makes sense as more powerful engines often consume more gas than less powerful ones. Note that we can’t make claims about a causal relationship from the chart alone, but in this case the observed relationship in the chart supports our mechanistic understanding of the world.\n\n\n\n\n\n\n\n\n\n\n\n\nOur conclusion above makes sense for the data we showed in chart. But remember that there are other variables in our dataframe, let’s show it again as a reminder.\n\n\n\n\n\n\n\n\n\nName\nMiles_per_Gallon\nCylinders\nDisplacement\nHorsepower\nWeight_in_lbs\nAcceleration\nYear\nOrigin\n\n\n\n\n0\nchevrolet chevelle malibu\n18.0\nEight\n307.0\n130.0\n3504\n12.0\n1970-01-01\nUSA\n\n\n1\nbuick skylark 320\n15.0\nEight\n350.0\n165.0\n3693\n11.5\n1970-01-01\nUSA\n\n\n2\nplymouth satellite\n18.0\nEight\n318.0\n150.0\n3436\n11.0\n1970-01-01\nUSA\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n396\ndodge rampage\n32.0\nFour\n135.0\n84.0\n2295\n11.6\n1982-01-01\nUSA\n\n\n397\nford ranger\n28.0\nFour\n120.0\n79.0\n2625\n18.6\n1982-01-01\nUSA\n\n\n398\nchevy s-10\n31.0\nFour\n119.0\n82.0\n2720\n19.4\n1982-01-01\nUSA\n\n\n\n\n399 rows × 9 columns\n\n\n\nWhat if one of the other columns also influence a car’s fuel efficiency? For example, it seems likely that the weight of the car impacts fuel efficiency, since more force is needed to propel a larger mass. To explore this variable, we can add more dimensions to this chart, e.g. specifying which column we want to color the points by.\n\nAltairggplot\n\n\nWhen using the color encoding channel, Altair will automatically figure out an appropriate color scale to use. The Weight_in_lbs column contains continuous numerical data so a continuous gradient will be used for the color scale. The largest value in the Weight_in_lbs column is represented with a dark color since this has the highest contrast to the light background of the chart.\n\nalt.Chart(cars).mark_point().encode(\n    x='Miles_per_Gallon',\n    y='Horsepower',\n    color='Weight_in_lbs'\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\nWhen using the color encoding channel, ggplot will automatically figure out which color scale to use. The Weight_in_lbs column contains continuous numerical data so a continuous gradient will be used for the color scale. The largest value in the Weight_in_lbs column is represented with a light color since this has the highest contrast to the dark background of the chart.\n\nggplot(cars) +\n    aes(\n        x = Miles_per_Gallon,\n        y = Horsepower,\n        color = Weight_in_lbs\n    ) +\n    geom_point()\n\nWarning: Removed 14 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaking space\nNotice the difference in how the legend is added in the two libraries. In Altair the overall width of the figure was increased to keep the dimensions of the chart area the same, whereas in ggplot the width of the figure is kept constant so the chart area must narrow to accommodate the legend. In general, we don’t want the chart area to shrink just because we are adding a legend, so here we would need to manually increase the width of the ggplot chart, which we will learn about in a future chapter. \n\n\n\n\n\n\nExercise 4\n\n\n\n\n\n\nHow does a car’s weight relate to its fuel efficiency?\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nAs with the previous exercise, you can try to start with a specific area of the chart, first focusing on finding the fuel efficiency of the cars with the highest horsepower, and then compare it to the cars with the lowest horsepower.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nWe can see that weight is correlated positively with Horsepower and negatively with Miles_per_Gallon. This aligns with our knowledge about the world: heavy cars require bigger engines and more fuel to propel them forward. However, remember that we can’t say anything about causation from the chart alone, we can just note the correlation and that is what we would expect based on our knowledge about physics of moving objects.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "1_intro.html#deep-dive",
    "href": "1_intro.html#deep-dive",
    "title": "1  Introduction",
    "section": "1.8 Deep dive",
    "text": "1.8 Deep dive\n\n\n\n\n\n\nClick to expand this optional content or proceed to the next section\n\n\n\n\n\n\nThe R and Python visualization ecosystems\nThere are a wide variety of high-level and low-level tools for visualizing data in R and Python. While we have already outline the advantages of the libraries we chose, it can be helpful to be aware of which others are available since you are likely to encounter some of them in the wild. In this diagram you can see an overview of how which other libraries exist and how they are connected.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs a reward for checking out the deep dive, enjoy this genAI composition of the visualization landscapes in R and Python.\n\n  \n    🎵\n    \n      Data Viz Ecosystem\n      Generated with artificial intelligence\n    \n  \n  \n    \n    \n    Your browser does not support the audio element.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "1_intro.html#exercise-mission",
    "href": "1_intro.html#exercise-mission",
    "title": "1  Introduction",
    "section": "1.9 Exercise mission",
    "text": "1.9 Exercise mission\nWith a commitment to sustainability and a vision for a greener future, Viridia is taking proactive steps to investigate and mitigate its environmental impact. One significant area of focus is the emissions associated with food consumption and production. Minister Reed, head of the environment department, has called on you to step up to help and tasked with investigating emissions in the city of Viridia.\n\n\n    \n    \n        Ministry of Environment\n        Minister Reed\n        \n            \n                Position\n                Head of Environment\n            \n            \n                Department\n                Urban Food Systems\n            \n            \n                ID Number\n                EI-2024-0042\n            \n            \n                Clearance\n                Level 5\n            \n        \n        Protecting Our Future • Est. 2024\n    \n    \n        \n    \n\n\n\n\n\n\n\n\nExercise 5\n\n\n\n\n\n\nTo start with your investigation, you’ll need to visualize the emissions data effectively. This will help unlock insights crucial for the Ministry of Environment. The data looks like this:\n\n\n\n\n\n\n\n\n\nFood Item\nTotal Food Supply (kg/capita/yr)\nEmissions (Kg CO2 / kg product)\n\n\n\n\n0\nApples\n21.33\n0.3\n\n\n1\nBananas\n15.11\n0.8\n\n\n2\nBarley (Beer)\n0.46\n1.1\n\n\n...\n...\n...\n...\n\n\n34\nTomatoes\n18.60\n1.4\n\n\n35\nWheat & Rye (Bread)\n84.96\n1.4\n\n\n36\nWine\n11.45\n1.4\n\n\n\n\n37 rows × 3 columns\n\n\n\nBefore you dive into coding, Minister Reed wants to ensure that you have understood your task…\n\nimport {createChatInterface} from \"./chat.js\"\n\n{\n\nconst instructions = \"You are Minister Reed of the city of Viridia, a sharp-witted, impatient but supportive environmental minister. Your colleague has been tasked with creating an Emissions Report. Guide them toward understanding why a complete picture is necessary and why including the Total Food Supply (kg/capita/yr) column matters (alongside the Emissions Kg CO2 / kg product). Once you get a satisfactory answer, end the conversation immediately and ask them to proceed to the next task. You are in a phone text convo.\";\n\nconst first_message = \"I need your Emissions Report on my desk by 2 pm. Remind me why you are including the Total Food Supply in your analysis?\";\n\nconst chatInterface = createChatInterface({\n  apiUrl,\n  instructions: instructions,\n  firstMessage: first_message,\n  bossImage: 'img/environ_minister.jpg',\n  bossName: 'Minister Reed',\n});\n\nreturn html`${chatInterface}`;\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 6\n\n\n\n\n\n\nIt’s time to put the Grammar of Graphics to good use. Create a scatter plot of the food supply and emissions data by following these steps:\n\nInstantiate the chart from the food_emission dataframe\nUse the point mark to create a point for each observation in the data.\nEncode Total Food Supply (kg/capita/yr) in the x channel and Emissions (Kg CO2 / kg product) in the y channel.\n\nYou can use the code cells below to code your answer:\n\nAltairggplot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nFor a reminder of the syntax, review section Section 1.7.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nAltairggplot\n\n\n\nalt.Chart(food_emission).mark_point().encode(\n    x='Total Food Supply (kg/capita/yr)',\n    y='Emissions (Kg CO2 / kg product)',\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\nggplot(food_emission) +\n    aes(\n        x=`Total Food Supply (kg/capita/yr)`,\n        y=`Emissions (Kg CO2 / kg product)`,\n    ) +\n    geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 7\n\n\n\n\n\n\nThese are striking results! There are some clear clusters and outliers in the data.\nWith altair you can add a tooltip to your chart. Tooltips are labels that pop up when you hover over a datapoint. You can choose which variable is shown in your tooltip just as you have been using x, y, and color.\nAdd a tooltip to investigate which foods stand out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nTake a closer look at the emissions data table - you’ll need the correct column name for the tooltip.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nalt.Chart(food_emission).mark_point().encode(\n    x='Total Food Supply (kg/capita/yr)',\n    y='Emissions (Kg CO2 / kg product)',\n    tooltip='Food Item',\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 8\n\n\n\n\n\n\n\n{\n  const instructions = \"You are Minister Reed of the city of Viridia, a sharp-witted, impatient but supportive environmental minister. You are discussing a recent Emissions Report with your colleague. The report reveals surprising findings: beef has an exceptionally high emissions rate (around 60 Kg CO2/kg product) compared to other foods, and its supply is also high. Milk has a high supply (190 kg/capita/yr) but moderate emissions. Many vegetables have very low emissions. You see great potential in reducing beef consumption in Viridia to combat climate change. Guide your colleague to this conclusion. Do not give the solution in the first message; lead your colleague to the answer over the course of three messages. Once they reach the correct conclusion, end the conversation.\";\n\n  const first_message = \"I've been reviewing the emissions data. What did you notice about the patterns in our food emissions?\";\n\n  const chatInterface = createChatInterface({\n    apiUrl,\n    instructions: instructions,\n    firstMessage: first_message,\n    bossImage: 'img/environ_minister.jpg',\n    bossName: 'Minister Reed',\n  });\n\n  return html`${chatInterface}`;\n}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "1_intro.html#footnotes",
    "href": "1_intro.html#footnotes",
    "title": "1  Introduction",
    "section": "",
    "text": "“pseudocode” is an informal way of writing code that is often used to explain a concept to the reader↩︎\nActively engaging your brain in exercises like this instead of simply trying to memorize an explanation you read, aids in recalling the information later↩︎\n What you typically think of as “a language”: English, Mandarin, Hindi, Swedish, etc↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "2_grouping.html",
    "href": "2_grouping.html",
    "title": "2  Grouping",
    "section": "",
    "text": "2.1 Why grouping matters\nSo far you have created declarative visualizations by representing them as identical point marks on a canvas with encoded x- and y-axis positions. This is the foundation for all the visualizations we will make, but it is rarely sufficient on its own to give a complete picture of the data. In particular, messy real-world data might show overall trends in the datasets, that evaporate when explored more closely. The goal of grouping is to distinguish between groups by basing the visual appearance of points in a chart on the value of categorical variable. Let’s see this in action in the following exercise.\nDid the conclusions above match your expectations? Proceed to the next exercise to find out if there is more to this dataset than meets the eye!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grouping</span>"
    ]
  },
  {
    "objectID": "2_grouping.html#why-grouping-matters",
    "href": "2_grouping.html#why-grouping-matters",
    "title": "2  Grouping",
    "section": "",
    "text": "Exercise 1\n\n\n\n\n\n\nIn Viridia, historians have been studying the remains from Earth to identify what went wrong and avoid repeating the mistakes of their ancestors. During their research, they uncovered records of a beverage known as “alcohol”.\nGiven the high prevalence of alcohol drinking in many of Earth’s nations, the Viridians thought the drink must have had many positive effects and allowed humans to live long and healthy lives. Curious to explore whether this was indeed the case, Viridian historians were excited to uncover a dataset containing the percent of heavy drinkers in each nation together with the average number of years people lived after retirement1.\nTo assess whether nations with a high percentage of heavy drinkers did indeed also tend to live longer lives, the historians created a scatterplot where each point represented a country, the x-axis showing the percentage of heavy alcohol drinkers, and the y-axis showing the average number of years left to live after reaching age 65.2\nBefore viewing what this chart looks like in the solution, draw out (either on paper or in your mind) what you think this chart would look like.\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nThink about what trend would you expect to see in this data. Do you think nations with a high percentage of heavy drinkers have long or short life spans?\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThis is the chart that the historians created:\n\n\n\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\nFigure 2.1\n\n\n\n\nFrom this scatter plot, the Viridians observe that nations with a high percentage of heavy drinkers does indeed tend to also have longer lifespans, such great news! Excited about their findings, the historians hurry to find out how to produce this noble alcohol beverage to hopefully introduce it into Viridian society as soon as possible.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\n\n\n\n“Not so fast” you caution the Viridian historians. Your memories of alcohol are dim, particularly from those nights when you ingested the substance, but you have a vague recollection of that it is not the health solution that the Viridians are looking for. You ask to see the raw data, which you should always inspect before taking any rash decisions. Confident in their findings, the historians show you the first few rows of the data in the table below, and inform you that you can hover over the points in the chart above to see additional information for each observations.\n\n\n\n\n\n\n\n\n\ncountry\nregion\nincome_group\npercentage_heavy_drinkers\nlife_expectancy_at_65\n\n\n\n\n0\nAfghanistan\nAsia\n1. Low income\n0.13\n9.80\n\n\n1\nAlbania\nEurope\n3. Upper middle income\n1.98\n16.08\n\n\n2\nAlgeria\nAfrica\n3. Upper middle income\n0.25\n15.29\n\n\n...\n...\n...\n...\n...\n...\n\n\n189\nYemen\nAsia\n1. Low income\n0.17\n12.38\n\n\n190\nZambia\nAfrica\n2. Lower middle income\n2.28\n9.40\n\n\n191\nZimbabwe\nAfrica\n2. Lower middle income\n2.06\n8.32\n\n\n\n\n192 rows × 5 columns\n\n\n\nStudy the table and the tooltip of the previous chart. What do you think might be the reason that countries with a higher percentage of heavy drinkers also have a higher life expectancy? Suggest one visual change to the chart that would help you explore if your suggested reason could influence the relationship between alcohol consumption and lifespan.\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nDo you think other variables in the dataset could influence alcohol consumption? E.g. the average income of the country or the region of the world where it is located? To see this in the chart, could you include some type of grouping according to that column, e.g. shape or color?\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nBoth the country’s income group and region might have an effect on the alcohol consumption and the lifespan. Here, we will explore this for the income group only, and you are free to explore the region on your own. To effectively add this information to the chart, we could use different colors to visually group the points by the income group variable:\n\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\nNotice how the data points form clusters by income group. Coloring reveals that both national alcoholism levels and life expectancy are correlated with income. High income countries tend to have longer lifespans and a greater proportion of heavy alcohol drinkers. We see the opposite picture for most low income countries, where both indicators are lower.\nThis could explain the mysterious relationship the historians found between heavy drinkers and life expectancy! It seems like countries that have a higher average income are likely to both have people who drink more and people who live longer. By using color to group the data, we have revealed that income level could be a confounding variable: it likely influences both life expectancy and alcohol consumption. If we had data at finer resolution, which contained each individual, we would probably see that they people who drink a lot don’t live the longest lives, but we don’t have access to that data here.\nThe insights you have revealed are sobering news for the Viridian historians, who are sure to proceed more cautiously in future projects!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grouping</span>"
    ]
  },
  {
    "objectID": "2_grouping.html#the-two-main-purposes-of-grouping",
    "href": "2_grouping.html#the-two-main-purposes-of-grouping",
    "title": "2  Grouping",
    "section": "2.2 The two main purposes of grouping",
    "text": "2.2 The two main purposes of grouping\nAs we have seen in the exercises above, grouping can have major benefits. We can divide this benefits into to two main categories which both support us in making more accurate conclusions about our data:\n\nDirectly compare trends and values for distinct groups.\nReveal patterns in the data that are obscured when looking at all points together.\n\nThese main benefits are often connected and can be explored simultaneously through a common grouping strategy. The example from the exercises on alcohol consumption and life expectancy fall under the second category: the data seemed to have a certain pattern when we looked at all the points together, but when grouping by another variable in the dataset, we discovered that this overall pattern could be due to confounding from another variable (income group).\nRevealing obscured patterns by grouping data is also referred to as Simpson’s Paradox; named not after Homer Simpson et al., but rather its inventor Edward H. Simpson, a British codebreaker. Simpson reported a curious phenomenon where a trend present in several different groups of data can disappear when they are combined. Below we show a more general and simplified illustration of Simpson’s Paradox than the one in our earlier exercise. Notice how the overall dataset does not have a clear direction but when you color by group, both groups exhibit the same negative trend between X and Y.\n\nOverallBy group\n\n\n\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\nIn this case, grouping makes the insidious Simpson’s Paradox visually unmistakable. This is a prime example of the utility of visualization in deepening our understanding of a data set, since without the grouping by color, we would have drawn different (and uninformative) conclusions about this data set.\nAn example of the first benefit, directly comparing groups, can be seen in the next chart where grouping by position on the y-axis reveals that life expectancies tend to be higher in countries belonging to the higher income groups.\n\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\nWhile position and color are generally the most effective grouping strategies, it is important to understand the unique strengths and pitfalls of each strategy to chose the one that best supports the comparisons we want to make. This is what we will learn about next.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grouping</span>"
    ]
  },
  {
    "objectID": "2_grouping.html#strategies-for-grouping",
    "href": "2_grouping.html#strategies-for-grouping",
    "title": "2  Grouping",
    "section": "2.3 Strategies for grouping",
    "text": "2.3 Strategies for grouping\nThe grammar of graphics gives us a convenient syntax for grouping where we define the visual channel that should represent a categorical variable. Generally speaking, position and color are the two most effective channels to use for grouping. Shape and size are also used, but often either in combination with one of the other two or for a specific purpose. The grammar of graphics allows for these to conveniently interchanged in the syntax:\n\nAltairggplot\n\n\n\nColorShapeSizePosition\n\n\nencode(color='category_column')\n\n\nencode(shape='category_column')\n\n\nencode(size='category_column')\n\n\nencode(x='category_column')\nencode(y='category_column')\n\n\n\n\n\n\nColorShapeSizePosition\n\n\naes(color=category_column)\n\n\naes(shape=category_column)\n\n\naes(size=category_column)\n\n\naes(x=category_column)\naes(y=category_column)\n\n\n\n\n\n\n\nColor\nThe human brain can detect color differences with little cognitive effort. Color is a preattentive feature3 which means that the brain can tell apart colors even without conscious attention. This is heightened when there is a high contrast, such as between the complimentary colors blue and orange.\nThis is great news for grouping! By encoding our categorical variable as color, we can leverage the brain’s ability to infer groups. Conveniently, color doesn’t alter the layout or structure of the data visualization, so it’s an efficient way to compare the exact values of data points between groups.\nIn the second exercise of this chapter we already saw how color could be used to group our life expectancy data by income group. Let’s now see what the code to create this charts looks like:\n\nAltairggplot\n\n\nHere we use color='region':\n\nimport altair as alt\nimport pandas as pd\n\n\nincome_df = pd.read_csv('data/income_lifeexp_alcohol.csv')\n\nalt.Chart(income_df).mark_point().encode(\n    x='percentage_heavy_drinkers',\n    y='life_expectancy_at_65',\n    color='income_group',\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\nHere we use color=region:\n\nlibrary(tidyverse)\n\n\nincome_df &lt;- read_csv('data/income_lifeexp_alcohol.csv')\n\nggplot(income_df) +\n    aes(\n        x=percentage_heavy_drinkers, \n        y=life_expectancy_at_65, \n        color=income_group\n    ) +\n    geom_point()\n\n\n\n\n\n\n\n\n\n\n\nNote that the power of grouping by color fades when used irresponsibly. Using colors that are too similar can blur the difference between groups and the more colors you include, the harder it is to stick to distinct hues. The exact number of colors you can use depends on your data: if there is a lot of overlap, then it is harder to distinguish multiple colors. A helpful guideline is that around five distinct categories/colors you should consider if the visualization is still effective or if you need to break it down into multiple charts instead. Once you reach eight distinct categories/colors, it is most certainly the case that it will be hard to distinguish some groups from each other.\nThere are several other important aspects of using colors effectively, such as how to ensure accessibility, particularly for people with color vision deficiencies. We will learn more about the these considerations when we go in depth into color theory, including specifics around which colors are safe to use together. In that chapter we will also learn how to represent ordered categories with different color choices than unordered categories, e.g. as with the case of the income groups here. \n\n\nShape\nShape is less a effective grouping strategy on its own, but it can be combined with color to provide an additional visual cue. Let’s take a look at a classic example: the infamous traffic light.\nDo you think that traffic lights are well designed? At first glance, they break a major rule of accessibility, using the worst possible color combination for people with red/green color vision deficiency. Thankfully, in many countries, traffic lights are encoded using both position (vertically along the “y-axis”), color, and shape.\n\nGrouping by three encoding channels reinforces the visual contrast and has probably prevented many accidents. Even in traffic light signals for cars that often lack the shape encoding, the vertical positioning of the different signals is effective enough so that the lack of a shape encoding is not a major hazard.\n\n\nShape up\nSome regions around the world has noticed that car traffic lights would be even safer if including shape as well, such as in this example from Nova Scotia in Eastern Canada\n\nThe syntax for encoding a shape aesthetic, is similar to that for color:\n\nAltairggplot\n\n\n\nalt.Chart(income_df).mark_point().encode(\n    x='percentage_heavy_drinkers',\n    y='life_expectancy_at_65',\n    color='income_group',\n    shape='income_group'\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\nSetting filled=True fills all the points with a solid color, making the shapes easier to distinguish:\n\nalt.Chart(income_df).mark_point(filled=True).encode(\n    x='percentage_heavy_drinkers',\n    y='life_expectancy_at_65',\n    color='income_group',\n    shape='income_group'\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\nggplot(income_df) +\n    aes(\n        x=percentage_heavy_drinkers, \n        y=life_expectancy_at_65, \n        color=income_group,\n        shape=income_group\n    ) + \n    geom_point()\n\n\n\n\n\n\n\n\n\n\n\nWhile this combined approach makes grouping clearer, there are some pitfalls. For instance, line icons limit the total area that can be colored, reducing the impact of color. It is better to use solid shapes when combining shape and color. Additionally, smaller shapes are difficult to distinguish, so when plotting a dense scatterplot of small marks, try restricting the number of unique shapes to three or fewer, or consider avoiding using shape altogether. \nIt is rarely effective to encode a different data variable in the color and shape channels. This tends to lead to too much visual information and it is difficult to distinguish the many different combinations visually.\nThe many combinations of income group and region in this chart are hard to separate visually, which makes this chart ineffective: \n\nAltairggplot\n\n\n\nalt.Chart(income_df).mark_point(filled=True).encode(\n    x='percentage_heavy_drinkers',\n    y='life_expectancy_at_65',\n    color='income_group',\n    shape='region'\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\nThe many combinations of income group and region in this chart are hard to separate visually, which makes this chart ineffective:\n\nggplot(income_df) +\n    aes(\n        x=percentage_heavy_drinkers, \n        y=life_expectancy_at_65, \n        color=income_group,\n        shape=region\n    ) + \n    geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nAvoid using color and shape for different variables since the combination can be difficult to distinguish\n\n\n\n\nSize\nSize is often used to represent the magnitude of quantitative data. But it can under limited circumstances be used for grouping. Size has an inherent direction from small to large, so it works better for ordered categorical data. One example is World Bank income level, ranging from low to high. In the next chart you can see that it is notably more difficult to tell apart the four different sizes, than the four different colors in the previous chart.\n\nAltairggplot\n\n\n\nalt.Chart(income_df).mark_point().encode(\n    x='percentage_heavy_drinkers',\n    y='life_expectancy_at_65',\n    size='income_group',\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\nggplot even displays a warning to be cautious when using size for categorical variable.\n\nggplot(income_df) +\n    aes(\n        x=percentage_heavy_drinkers, \n        y=life_expectancy_at_65, \n        size=income_group,\n    ) + \n    geom_point()\n\nWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nIn general, size-based groupings can be difficult to distinguish, even when used for ordinal categories as above. Restricting size to four or fewer levels is a good rule of thumb, and for most visualizations grouping by size should be avoided in favor of more effective channels such as position and color.\n\n\n\n\nPosition\nGrouping by position creates the clearest separation between groups. Most commonly when using positions, the categorical variable is distributed along the x or y axis. This gives each group its own visual lane, making it easier to compare overall distributions across categories.\nBelow, we distribution the groups along the y-axis to compare heavy alcohol consumption across income groups:\n\nAltairggplot\n\n\n\nalt.Chart(income_df).mark_point().encode(\n    x='percentage_heavy_drinkers',\n    y='region',\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\nggplot(income_df) + \n    aes(\n        x=percentage_heavy_drinkers, \n        y=region, \n    ) + \n    geom_point()\n\n\n\n\n\n\n\n\n\n\n\nNotice how easy it is to compare the distributions between regions? This is because the separation between the groups is much clearer when using distinct positions than when using distinct colors, shapes, or sizes for points with overlapping positions. However, since the the categorical variable now occupies one of the axes, we can not use position-based grouping when we are interesting in visualizaing a pairwise relationships between two continuos variables as we did in the first few exercises.\n\n\n\n\n\n\nNote\n\n\n\nIf we are interested in comparing groups for a single continuous variable (such as percentage_heavy_drinkers above), position is often the most effective grouping method. If we are interested in comparing groups while visualizing a pairwise relationship between two continuous variables\n\n\nAnother caution when using position for grouping, is that plotting data points along a single axis can lead to overlap. That’s where jittering comes to the rescue. Jittering introduces slight variation, or ‘jitter’, in the position of data points in each lane, making them easier to see.\n\n\nJitterbug\nBack in the 1930s, the jitterbug was a lively, often wild, dance style that matched the fast-paced, unpredictable energy of swing music. In data visualization, jittering serves a similar purpose: to add a touch of randomness to points in a plot.\n\nLet’s examine how jittering works.\n\nAltairggplot\n\n\nIn Altair, we create a random calculated variable called jitter by appending the .transform_calculate() method to our chart. We use our newly created jitter variable, encoding it as the yOffset of each data point using yOffset='jitter:Q'. This shifts the yOffset of each point by a random value. The :Q tells Altair that jitter is a continuous quantitative variable, which we need since it is not part of the pandas dataframe, so the data type can’t be inferred from the data frame.\n\nalt.Chart(income_df).mark_point().encode(\n    x='percentage_heavy_drinkers',\n    y='region',\n    color='region',\n    yOffset=\"jitter:Q\"\n).transform_calculate(\n    jitter=\"random()\"\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\nIn ggplot2, you can jitter points by using the geom_jitter, which is a combination of geom_point together with a function called position_jitter.\n\nggplot(income_df) + \n    aes(\n        x=percentage_heavy_drinkers, \n        y=region, \n        color=region\n    ) + \n    geom_jitter()\n\n\n\n\n\n\n\n\n\nggplot(income_df) + \n    aes(\n        x=percentage_heavy_drinkers, \n        y=region, \n        color=region\n    ) + \n    geom_jitter(height=0.2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nJittering can be confusing! It can easily be mistaken for a scatterplot with true variation in the underlying data.\n\n\nBy separating the points through jittering, we make it easier to distinguish individual data points. This clarity allows us to add additional grouping, such as color. By coloring our jittered data points as a second categorical variable, we can highlight a secondary grouping. This allows us to better understand complex relationships and interpret multiple levels of comparison in the data.\nWhen grouping by two categorical variables, which should you assign to position and which to color? Position is more visually obvious than color. This means that we assign our primary comparison to position and our secondary comparison to color.\nLet’s apply this to a real world example.\n\n\n\n\n\n\nExercise 3\n\n\n\n\n\n\nThe Virdians are trying to understand how life expectancy varies across income groups globally, and the role world region plays in these differences.\nDefine the primary and secondary comparisons for this research question.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThe primary comparison is comparing life expectancy across income groups. The secondary comparison is between world regions.\n\n\n\n\nNow, using the variables region, income_group and life_expectancy_at_65, create a plot that reflects these priorities, showing all countries grouped using position and color. Make sure to add jittering too!\n\nAltairggplot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nalt.Chart(income_df).mark_point().encode(\n    x='life_expectancy_at_65',\n    y='income_group',\n    color='region',\n    yOffset='jitter:Q'\n).transform_calculate(\n    jitter='random()'\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nYou are primarily comparing the income_group variable, so it should be grouped by position on either the x or y axis. The secondary comparison, region, should be encoded as color.\n\nggplot(income_df) + \n    aes(\n        x=life_expectancy_at_65,\n        y=income_group,\n        color=region\n    ) +\n    geom_jitter()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFaceting\nFaceting takes the concept of grouping to the next level. Instead of using different visual elements within a single chart, it generates multiple small charts, each dedicated to a grouped subset of the data. Faceting is particularly effective for highlighting distinct trends and patterns in each subset, as well as identifying extreme values or outliers within groups. We could think of faceting as a type of position grouping, but its advantage is that it keeps both the x and y axis free for other variables.\nLet’s check out the syntax:\n\nAltairggplot\n\n\nTo facet by income group, we can append .facet('income_group') to our chart. When we are faceting the xy-axes are the same for all the grouped facets/subcharts. The default layout in Altair is to have single row with all the charts spread out horizontally. This would make it easy to compare the charts’ y-axis, since they would all be aligned. If we instead are the most interested in comparing the values on the x-axis, we could spread the charts out vertically in a single column. Here, we don’t have an explicit primary comparison, but we show how to change from the default horizontal layout by using the columns parameter.\n\nalt.Chart(income_df).mark_point().encode(\n    x='percentage_heavy_drinkers',\n    y='life_expectancy_at_65',\n).facet(\n    'income_group',\n    columns=1\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\nIn addition to faceting on a single variable in the data, faceting can also be done over two variables: one spread horizontally and one spread out vertically in the faceted charts. In Altair, we would use the column and row parameter in order to achieve this. For example, to have facets that are grouped by both income group and region, we could use facet(column='income_group', row='region'). This can be effective when we need to group our data further, but it does risk making the chart hard to overview, so it is best used when there are fewer categories in the faceting variables.\n\n\nTo facet by income group, we can append .facet_wrap(vars(income_group)) to our chart. The vars function is required for facet_wrap to understand that we are referring to column names just like aes is required when typing out column names for the different visual channels.\nWhen we are faceting the xy-axes are the same for all the grouped facets/subcharts. The default layout in ggplot is to achieve and even number of columns and rows. This is good when we are low on space, but otherwise it is preferred to spread the charts out horizontally in a single row if the primary purpose was to compare the charts’ y-axis, since they would all be aligned, or vertically in a single column if we are the most interested in comparing the groups in terms of the values on the x-axis. Here, we don’t have an explicit primary comparison, but we show how to change from the default horizontal layout by using the ncol parameter.\n\nggplot(income_df) +\n    aes(\n        x = percentage_heavy_drinkers, \n        y = life_expectancy_at_65\n    ) +\n    geom_point() +\n    facet_wrap(vars(income_group), ncol=1)\n\n\n\n\n\n\n\n\nIn addition to faceting on a single variable in the data, faceting can also be done over two variables: one spread horizontally and one spread out vertically in the faceted charts. In ggplot, we would swap out facet_wrap to facet_grid in order to do this. For example, to have facets that are grouped by both income group and region, we could use facet_grid(vars(income_group), vars(region)). This can be effective when we need to group our data further, but it does risk making the chart hard to overview, so it is best used when there are fewer categories in the faceting variables.\n\n\n\nAs you can see above, faceting makes it easy to observse the overall shape of the distribution for each income group and how tightly clustered the values are. It also reveals potential outliers in the Upper Middle Income facet – we can easily spot two countries with a higher percentage of heavy drinkers. On the other hand, it is now harder to compare the exact values between two groups because the points are spread out in different charts, instead of right next to each other in a single chart.\nAll the previous grouping strategies that we have discussed can be utilized within each facet as additional layers of grouping. This nested grouping can be powerful to stratify our data according to multiple categorical variables, but keep in mind that it can become confusing if we try to fit too much into a single visualization. Exactly how many levels of grouping you can use depends on how well separated your data is and how many observations you have; more observations and less separation between groups means that you will have to be more careful and use less levels of grouping to keep the visualization easy to interpret.\nLet’s try out an example of how we can use faceting together with other grouping strategies.\n\n\n\n\n\n\nExercise 4\n\n\n\n\n\n\nEdit this chart to use both faceting and grouping. Facet by world region (region) and group by World Bank income group (income_group). Ensure that only two facets are shown per row.\n\nAltairggplot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nAltairggplot\n\n\n\nalt.Chart(income_df).mark_point().encode(\n    x='percentage_heavy_drinkers',\n    y='life_expectancy_at_65',\n    color='income_group'\n).facet(\n    'region',\n    columns=2\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\nggplot(income_df) +\n    aes(\n        x = percentage_heavy_drinkers, \n        y = life_expectancy_at_65,\n        color=income_group\n    ) +\n    geom_point() +\n    facet_wrap(vars(region), ncol=2)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grouping</span>"
    ]
  },
  {
    "objectID": "2_grouping.html#deep-dive",
    "href": "2_grouping.html#deep-dive",
    "title": "2  Grouping",
    "section": "2.4 Deep dive",
    "text": "2.4 Deep dive\n\n\n\n\n\n\nClick to expand this optional content or proceed to the next section",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grouping</span>"
    ]
  },
  {
    "objectID": "2_grouping.html#mission",
    "href": "2_grouping.html#mission",
    "title": "2  Grouping",
    "section": "2.5 Mission",
    "text": "2.5 Mission\nViridians pride themselves on being part of the #1 Happiest Colony in the Galaxy. They have won medals and trophies for it. But this year is extremely competitive. To make sure they come out on top, Viridians are investigating the history of mental wellbeing on Earth.\n\n\n\nYou will be working with Grumble Thorax, a seasoned Happiness Compliance Officer.\n\n\n    \n    \n        Ministry of Wellbeing\n        Grumble Thorax\n        \n            \n                Position\n                Happiness Compliance Officer\n            \n            \n                Department\n                Wellbeing and Flourishing\n            \n            \n                ID Number\n                EI-2024-2313\n            \n            \n                Clearance\n                Level 3\n            \n        \n        Protecting Our Future • Est. 2024\n    \n    \n        \n    \n\n\n\n\n\n\n\n\nExercise 5\n\n\n\n\n\n\nGrumble Thorax has discovered an ancient document called ‘Mental State of the World Report 2024’.4 Its creators asked hundreds of thousands of Earthlings about their mental wellbeing. Each age_group within each country received an average mental health quotient score (MHQ_score) - the higher number, the better wellbeing.\nWe also have a categorical variable for the world region.\n\n\n\n\n\n\n\n\n\ncountry\nage_group\nMHQ_score\nregion\n\n\n\n\n0\nAlgeria\n18-24\n33.435450\nAfrica\n\n\n1\nAngola\n18-24\n38.537090\nAfrica\n\n\n2\nArgentina\n18-24\n26.334338\nAmericas\n\n\n...\n...\n...\n...\n...\n\n\n473\nVenezuela\n75+\n117.085094\nAmericas\n\n\n474\nYemen\n75+\n117.402423\nAsia\n\n\n475\nZimbabwe\n75+\n84.497222\nAfrica\n\n\n\n\n476 rows × 4 columns\n\n\n\nBefore you start your analysis, Grumble Thorax has some questions for you.\n\nimport {createChatInterface} from \"./chat.js\"\n\n{\n\nconst instructions = \"You are Grumble Thorax, a Happiness Compliance Officer. You are black-humoured, sarcastic. You supervising a new worker to analyze the 'Mental State of the World Report', which has the variables `age_group`, mental health score `MHQ_score` and `region` (these are continents not countries, e.g, Africa). Be supportive and help them to answer your question fully and specifically. If they talk about totally unrelated things like countries shut them down and steer them back. Do not provide answers as this is an open ended question more about testing their reasoning (any hypothesis is fine, support it). Once you get a satisfactory answer, end the conversation immediately and ask them to proceed to the next task. Ensure that the user's ideas cover both age groups and regions. Be succinct - are in a phone text convo.\";\n\nconst first_message = \"A new recruit... I can hardly contain my joy. If you're so clever, what trends do you expect to see in the data?\";\n\nconst chatInterface = createChatInterface({\n  apiUrl,\n  instructions: instructions,\n  firstMessage: first_message,\n  bossImage: 'img/grumble_thorax.jpg',\n  bossName: 'Grumble Thorax',\n});\n\nreturn html`${chatInterface}`;\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s time to use everything you’ve learnt in this chapter.\nCreate a visualization comparing how mental wellbeing varies across age groups within each region. You should use a combination of faceting, position and color.\n\nAltairggplot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nFaceting isolates each group make it easier to compare values within each group. Which categorical variable are you looking within?\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nalt.Chart(wellbeing_df).mark_point().encode(\n    y='MHQ_score',\n    x='age_group',\n    color=\"age_group\"\n).facet(\n    'region'\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nFaceting isolates each group make it easier to compare values within each group. Which categorical variable are you looking within?\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nggplot(wellbeing_df) +\n    aes(\n        x = region, \n        y = MHQ_score, \n        color = region\n    ) +\n    geom_point() +\n    facet_wrap(~ age_group)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat work! Now create the opposite visualization, comparing how mental wellbeing varies across regions within each age group.\n\nAltairggplot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nalt.Chart(wellbeing_df).mark_point().encode(\n    y='MHQ_score',\n    x='region',\n    color=\"region\"\n).facet(\n    'age_group'\n)\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nggplot(wellbeing_df) +\n    aes(\n        x = region, \n        y = MHQ_score, \n        color = region\n    ) +\n    geom_point() +\n    facet_wrap(~ age_group)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s time to report your findings back to Grumble Thorax…\n\n{\n\nconst instructions = \"You are Grumble Thorax, a Happiness Compliance Officer. You are black-humoured, sarcastic. You supervising a new worker who has just analyzed the 'Mental State of the World Report'. You are looking for the following answers: generally mental wellbeing increases as people get older (higher age groups). In younger people Africa seems to have the highest MHQ scores, and in older its the Americas. Europe and Oceania consistently have the lowest across all age groups. Asia is medium-high. Be supportive and help them to answer your question fully and specifically. If they talk about totally unrelated things shut them down and steer them back. Do not provide answers as this is an open ended question more about testing their reasoning (any hypothesis is fine, support it). Use probing questions, do not give the answers away unless they are totally stuck after 3 responses. Once you get a satisfactory answer, end the conversation immediately and tell them their mission is complete and that you actually don't hate them. Say goodbye. Ensure that the user's ideas cover both age groups and regions. Be succinct - are in a phone text convo.\";\n\nconst first_message = \"Oh, look who decided to show up again. Well, spill it—what did you find out?\";\n\nconst chatInterface = createChatInterface({\n  apiUrl,\n  instructions: instructions,\n  firstMessage: first_message,\n  bossImage: 'img/grumble_thorax.jpg',\n  bossName: 'Grumble Thorax',\n});\n\nreturn html`${chatInterface}`;\n\n}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grouping</span>"
    ]
  },
  {
    "objectID": "2_grouping.html#footnotes",
    "href": "2_grouping.html#footnotes",
    "title": "2  Grouping",
    "section": "",
    "text": "Source: Global Burden of Disease Study 2021 (GBD 2021) Results; The World Bank https://datahelpdesk.worldbank.org/knowledgebase/articles/906519-world-bank-country-and-lending-groups↩︎\nRetirement age differs between countries. We have used age 65 as it is close to the average in OECD countries. https://www.oecd-ilibrary.org/docserver/9bf0cb7f-en.pdf↩︎\nWolfe JM, Utochkin IS. What is a preattentive feature? Curr Opin Psychol. 2019 Oct;29:19-26. doi: 10.1016/j.copsyc.2018.11.005. Epub 2018 Nov 13. PMID: 30472539; PMCID: PMC6513732.↩︎\nSource: Sapien Labs (2024): https://sapienlabs.org/whats_new/sapien-labs-releases-the-4th-annual-mental-state-of-the-world-report/↩︎",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grouping</span>"
    ]
  }
]